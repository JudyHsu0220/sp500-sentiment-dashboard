# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hqWpib6xNj1SBW4TxPwkwclsN7r8-T8M
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import altair as alt
import ast

# Load cleaned dataset
@st.cache_data
def load_data():
    df = pd.read_csv("merged_sentiment_cleaned_202005_202504.csv")
    df['date'] = pd.to_datetime(df['date'])
    df['nlp_features'] = df['nlp_features'].apply(ast.literal_eval)
    df['tokens'] = df['nlp_features'].apply(lambda x: x.get('tokens', []))
    df['month'] = df['date'].dt.to_period('M')
    return df

df = load_data()

# Sidebar
st.sidebar.title("Sentiment Dashboard")
page = st.sidebar.radio("Select a view:", ["SPX500 Sentiment Trend", "Company Sentiment & Alerts", "Keyword Cloud"])

# 1. SPX500 Sentiment Trendline
if page == "SPX500 Sentiment Trend":
    st.title("SPX500 Market Sentiment Trend")
    spx_df = df[df['related'] == 'S&P 500'].groupby('date')['sentiment'].mean()
    spx_df_rolling = spx_df.rolling(window=7).mean()

    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(spx_df.index, spx_df.values, label='Daily Sentiment')
    ax.plot(spx_df_rolling.index, spx_df_rolling.values, label='7-Day Moving Avg', linestyle='--')
    ax.set_title("S&P 500 Daily Sentiment")
    ax.legend()
    st.pyplot(fig)

# 2. Company Sentiment Summary
elif page == "Company Sentiment & Alerts":
    st.title("Company-Level Sentiment Alerts")
    selected_date = st.date_input("Select a date:", value=pd.to_datetime("2024-12-01"))
    daily_df = df[df['date'] == pd.to_datetime(selected_date)]

    summary = daily_df.groupby("related").agg(
        mention_count=('title', 'count'),
        avg_sentiment=('sentiment', 'mean')
    ).reset_index()
    summary['alert'] = summary['avg_sentiment'].apply(lambda x: '!Alert!' if x < -0.5 else '')

    st.write(f"### Company sentiment on {selected_date}:")
    st.dataframe(summary.sort_values("mention_count", ascending=False))

# 3. Keyword Cloud
elif page == "Keyword Cloud":
    st.title("Keyword Frequency Word Cloud")
    all_tokens = [token for tokens in df['tokens'] for token in tokens if isinstance(token, str)]
    token_freq = pd.Series(all_tokens).value_counts().to_dict()

    wordcloud = WordCloud(width=1000, height=500, background_color='white').generate_from_frequencies(token_freq)
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis('off')
    st.pyplot(fig)